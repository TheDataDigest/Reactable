Total_Goals  = colDef(name="TOTAL GOALS", maxWidth=130, align="right"),
Age_average = colDef(name = "AVG AGE", align = "center", maxWidth = 120,
footer = "Mean age of players",
cell = function(value) {round(value, 1)},
cell = color_tiles(teams, bias = 0.4, colors = pal_strive))
)) %>%
google_font(font_family="Roboto", font_weight = 300)
Age_average = colDef(name = "AVG AGE", align = "center", maxWidth = 120,
#cell = function(value) {round(value/1e6, 1)},
## Putting both together
table <- reactable(data = teams,
theme = reactableTheme(
style=list(fontFamily="Roboto"),
searchInputStyle = list(background="black"),
pageButtonStyle = list(fontSize=14),
backgroundColor="black",
color="white",
footerStyle = list(color="white", fontSize=11),
borderColor="#3D3D3D",
borderWidth=0.019
),
defaultColDef = colDef(vAlign="center", align="center", headerVAlign="center"),
columns = list(
rank = colDef(name="", style=list(fontSize=13), maxWidth=50, align="right"),
Country = colDef(name="COUNTRY", align="left", vAlign="center", width=220),
Players = colDef(name="# PLAYERS", maxWidth=130, align="left"),
Total_Value = colDef(name="TOTAL VALUE", minWidth=160,
#cell = function(value) {round(value/1e6, 1)},
cell=data_bars(data = teams,
bar_height=8,
text_size=11,
text_color="white",
text_position = "outside-end",
background = "transparent",
round_edges = TRUE,
fill_color=c("#FFBC51",'#FF3A3A'),
fill_gradient = TRUE)),
Total_Games = colDef(name="TOTAL GAMES", maxWidth=130, align="right"),
Total_Goals  = colDef(name="TOTAL GOALS", maxWidth=130, align="right"),
Age_average = colDef(name = "AVG AGE", align = "center", maxWidth = 120,
footer = "Mean age of players",
cell = function(value) {round(value, 1)}
# cell = color_tiles(teams, bias = 0.4, colors = pal_strive))
))) %>%
google_font(font_family="Roboto", font_weight = 300)
saveWidget(table, "01b_teams.html", selfcontained = TRUE)
teams <- teams %>%
mutate(Total_Value_mio = round(Total_Value / 1e6, 0),
Age_average = round(Age_average, 1))
teams
## Putting both together
table_012 <- reactable(data = teams,
theme = reactableTheme(
style=list(fontFamily="Roboto"),
searchInputStyle = list(background="black"),
pageButtonStyle = list(fontSize=14),
backgroundColor="black",
color="white",
footerStyle = list(color="white", fontSize=11),
borderColor="#3D3D3D",
borderWidth=0.019
),
defaultColDef = colDef(vAlign="center", align="center", headerVAlign="center"),
columns = list(
rank = colDef(name="", style=list(fontSize=13), maxWidth=50, align="right"),
Country = colDef(name="COUNTRY", align="left", vAlign="center", width=220),
Players = colDef(name="# PLAYERS", maxWidth=130, align="left"),
Total_Value_mio = colDef(name="TOTAL TEAM VALUE", minWidth=160,
footer = "Total team value in million â‚¬",
cell=data_bars(data = teams,
bar_height=8,
text_size=11,
text_color="white",
text_position = "outside-end",
background = "transparent",
round_edges = TRUE,
fill_color=c("#FFBC51",'#FF3A3A'),
fill_gradient = TRUE)),
Total_Games = colDef(name="TOTAL GAMES", maxWidth=130, align="right"),
Total_Goals  = colDef(name="TOTAL GOALS", maxWidth=130, align="right"),
Age_average = colDef(name = "AVG AGE", align = "center", maxWidth = 120,
footer = "Mean age of players",
cell = color_tiles(teams, bias = 0.4, colors = pal_strive))
)) %>%
google_font(font_family="Roboto", font_weight = 300)
saveWidget(table_012, "01c_teams.html", selfcontained = TRUE)
View(teams)
euro2024$flag_url
euro2024 %>%
group_by(Country, flag_url) %>%
summarize(Players = n(),
Total_Value = sum(Value),
Total_Games = sum(Games, na.rm = T),
Total_Goals = sum(Goals, na.rm = T),
Age_average = mean(Age)) %>%
ungroup() %>%
mutate(Rank = row_number()) %>%
select(Rank, everything())
## second try
teams <- euro2024 %>%
group_by(Country, flag_url) %>%
summarize(Players = n(),
Total_Value = round(sum(Value)/1e6, 0),
Total_Games = sum(Games, na.rm = T),
Total_Goals = sum(Goals, na.rm = T),
Age_average = round(mean(Age), 1)) %>%
ungroup() %>%
mutate(Rank = row_number()) %>%
select(Rank, everything())
teams
# Sample data
teams <- data.frame(
rank = 1:5,
Country = c("USA", "Germany", "Brazil", "France", "Argentina"),
Players = c(23, 22, 21, 23, 22),
Total_Value = c(1234000000, 987000000, 876000000, 789000000, 654000000),
flag_url = c(
"https://upload.wikimedia.org/wikipedia/en/a/a4/Flag_of_the_United_States.svg",
"https://upload.wikimedia.org/wikipedia/en/b/ba/Flag_of_Germany.svg",
"https://upload.wikimedia.org/wikipedia/en/0/05/Flag_of_Brazil.svg",
"https://upload.wikimedia.org/wikipedia/en/c/c3/Flag_of_France.svg",
"https://upload.wikimedia.org/wikipedia/commons/1/1a/Flag_of_Argentina.svg"
)
)
# Create the reactable with a custom cell function for the country column
temp_flag <- reactable(
data = teams,
columns = list(
rank = colDef(name = "Rank"),
Country = colDef(
name = "Country",
cell = function(value, index) {
# Create the flag image element
flag <- img(src = teams$flag_url[index], height = "20px", style = "margin-right: 8px;")
# Combine the flag image and country name
tagList(flag, value)
},
align = "left"
),
Players = colDef(name = "# Players"),
Total_Value = colDef(name = "Total Value")
)
)
saveWidget(temp_flag, "temp_flag.html", selfcontained = TRUE)
# unique flag column
temp_flag <- reactable(
data = teams,
columns = list(
rank = colDef(name = "Rank"),
flag_url = colDef(
name = "",
cell = function(value) {
img(src = value, height = "20px")
},
maxWidth = 50
),
Country = colDef(name = "Country", align = "left"),
Players = colDef(name = "# Players"),
Total_Value = colDef(name = "Total Value")
)
)
saveWidget(temp_flag, "temp_flag1.html", selfcontained = TRUE)
# unique flag column
temp_flag <- reactable(
data = teams,
columns = list(
rank = colDef(name = "Rank"),
flag_url = colDef(
name = "",
cell = function(value) {
img(src = value, height = "20px")
},
maxWidth = 50
),
Country = colDef(name = "Country", align = "left"),
Players = colDef(name = "# Players"),
Total_Value = colDef(name = "Total Value")
)
)
saveWidget(temp_flag, "temp_flag1.html", selfcontained = TRUE)
temp_flag <- reactable(
data = teams,
columns = list(
rank = colDef(name = "Rank"),
flag_url = colDef(
name = "",
cell = function(value) {
img(src = value, height = "20px")
},
maxWidth = 50
),
Country = colDef(name = "Country", align = "left"),
Players = colDef(name = "# Players"),
Total_Value = colDef(name = "Total Value")
),
columnOrder = c("rank", "flag_url", "Country", "Players", "Total_Value")  # Define the column order
)
temp_flag <- reactable(
data = teams,
columns = list(
rank = colDef(name = "Rank"),
flag_url = colDef(
name = "Flag",
cell = function(value) {
img(src = value, height = "20px")
},
maxWidth = 50
),
Country = colDef(name = "Country", align = "left"),
Players = colDef(name = "# Players"),
Total_Value = colDef(name = "Total Value")
),
columnOrder = c("rank", "flag_url", "Country", "Players", "Total_Value")  # Define the column order
)
saveWidget(temp_flag, "temp_flag4.html", selfcontained = TRUE)
teams
temp_flag <- reactable(
data = teams,
columns = list(
rank = colDef(name = "Rank"),
flag_url = colDef(
name = "Flag",
cell = function(value) {
img(src = value, height = "20px")
},
maxWidth = 50
),
Country = colDef(name = "Country", align = "left"),
Players = colDef(name = "# Players"),
Total_Value = colDef(name = "Total Value")
),
columnOrder = c("rank", "flag_url", "Country", "Players", "Total_Value")  # Define the column order
)
temp_flag <- reactable(
data = teams,
columns = list(
rank = colDef(name = "Rank"),
flag_url = colDef(
name = "Flag",
cell = function(value) {
img(src = value, height = "20px")
},
maxWidth = 50
),
Country = colDef(name = "Country", align = "left"),
Players = colDef(name = "# Players"),
Total_Value = colDef(name = "Total Value")
)
)
saveWidget(temp_flag, "temp_flag4.html", selfcontained = TRUE)
teams
names(teams)
teams
# country summary (before nesting)
teams <- euro2024 %>%
group_by(Country) %>%
summarize(Players = n(),
Total_Value = sum(Value),
Total_Games = sum(Games, na.rm = T),
Total_Goals = sum(Goals, na.rm = T),
Age_average = mean(Age)) %>%
ungroup() %>%
mutate(Rank = row_number()) %>%
select(Rank, everything())
names(teams)
names(euro2024)
#SUBTABLE DATA, group data by fitness discipline ----
players <- euro2024 %>%
select(Rank, Country, Name, Value, Games, Goals, Age)
euro2024_BU
#SUBTABLE DATA, group data by fitness discipline ----
players <- euro2024_BU %>%
select(Number, Country, Name, Value, Games, Goals, Age, Position)
euro2024_BU
View(euro2024_BU)
#SUBTABLE DATA, group data by fitness discipline ----
players <- euro2024_BU %>%
select(Number, country, Name, Value, Games, Goals, Age, Position)
#SUBTABLE DATA, group data by fitness discipline ----
players <- euro2024_BU %>%
select(Number, country, Name, Value, games, Goals, Age, Position)
#SUBTABLE DATA, group data by fitness discipline ----
players <- euro2024 %>%
select(Number, Country, Name, Value, Games, Goals, Age, `Position Basic`)
#Create Reactable
table<-reactable(data = teams,
theme = reactableTheme(
style=list(fontFamily="Roboto"),
searchInputStyle = list(background="black"),
pageButtonStyle = list(fontSize=14),
backgroundColor="black",
color="white",
footerStyle = list(color="white", fontSize=11),
borderColor="#3D3D3D",
borderWidth=0.019
),
defaultColDef = colDef(vAlign="center", align="center", headerVAlign="center"),
columns = list(
rank = colDef(name="", style=list(fontSize=13), maxWidth=50, align="right"),
Country = colDef(name="COUNTRY", align="left", vAlign="center", width=220),
Players = colDef(name="# PLAYERS", maxWidth=130, align="left"),
Total_Value = colDef(name="TOTAL VALUE", minWidth=160,
cell=data_bars(data = teams,
bar_height=8,
text_size=11,
text_color="white",
text_position = "outside-end",
background = "transparent",
round_edges = TRUE,
fill_color=c("#FFBC51",'#FF3A3A'),
fill_gradient = TRUE)),
Total_Games = colDef(name="TOTAL GAMES", maxWidth=130, align="right"),
Total_Goals  = colDef(name="TOTAL GOALS", maxWidth=130, align="right"),
Age_average = colDef(name="AVG AGE", align="center", maxWidth=120,
footer="Mean age of players",
cell=color_tiles(data = teams, bias= 0.4, colors=pal_strive))
),
#Sub-Table - nested reactable, when user clicks on instructor, details show aggregates by modal per instructor
details = function(index){
new = players[players$Country == teams$Country[index],]
reactable(data=new,
defaultColDef = colDef(vAlign="center", align="center", headerVAlign="center"),
theme = reactableTheme(
style=list(fontFamily="Roboto"),
searchInputStyle = list(background="black"),
pageButtonStyle = list(fontSize=14),
backgroundColor="black",
color="white",
footerStyle = list(color="white", fontSize=11),
borderColor="black",
borderWidth=0.019
),
columns = list(
instructor=colDef(show=FALSE),
image_path = colDef(name="", width=265),
discipline = colDef(name="", maxWidth=130, align="left", footer="Breakout by Type", footerStyle=list(color='black')),
rank = colDef(name="", style=list(fontSize=13), maxWidth=50, align="right"),
workouts= colDef(name="", minWidth=120),
minutes=colDef(name="", minWidth=160,
cell=data_bars(new,
bar_height=8,
text_size=11,
text_color="white",
text_position = "outside-end",
background = "transparent",
round_edges = TRUE,
fill_color=c("#FFBC51",'#FF3A3A'),
fill_gradient = TRUE)),
difficulty = colDef(name="", align="center", maxWidth=120,
cell=color_tiles(new, bias= 0.4, colors=pal_strive)),
workout_data = colDef(name="",  maxWidth=100,
cell=react_sparkline(new, labels=c("first","last"),
line_color = "white")
))
)
}
)%>%
google_font(font_family="Roboto", font_weight = 300)
saveWidget(table, "05_nested.html", selfcontained = TRUE)
#Create Reactable
table<-reactable(data = teams,
theme = reactableTheme(
style=list(fontFamily="Roboto"),
searchInputStyle = list(background="black"),
pageButtonStyle = list(fontSize=14),
backgroundColor="black",
color="white",
footerStyle = list(color="white", fontSize=11),
borderColor="#3D3D3D",
borderWidth=0.019
),
defaultColDef = colDef(vAlign="center", align="center", headerVAlign="center"),
columns = list(
rank = colDef(name="", style=list(fontSize=13), maxWidth=50, align="right"),
Country = colDef(name="COUNTRY", align="left", vAlign="center", width=220),
Players = colDef(name="# PLAYERS", maxWidth=130, align="left"),
Total_Value = colDef(name="TOTAL VALUE", minWidth=160,
cell=data_bars(data = teams,
bar_height=8,
text_size=11,
text_color="white",
text_position = "outside-end",
background = "transparent",
round_edges = TRUE,
fill_color=c("#FFBC51",'#FF3A3A'),
fill_gradient = TRUE)),
Total_Games = colDef(name="TOTAL GAMES", maxWidth=130, align="right"),
Total_Goals  = colDef(name="TOTAL GOALS", maxWidth=130, align="right"),
Age_average = colDef(name="AVG AGE", align="center", maxWidth=120,
footer="Mean age of players",
cell=color_tiles(data = teams, bias= 0.4, colors=pal_strive))
),
#Sub-Table - nested reactable, when user clicks on instructor, details show aggregates by modal per instructor
details = function(index){
new = players[players$Country == teams$Country[index],]
reactable(data=new,
# defaultColDef = colDef(vAlign="center", align="center", headerVAlign="center"),
# theme = reactableTheme(
#   style=list(fontFamily="Roboto"),
#   searchInputStyle = list(background="black"),
#   pageButtonStyle = list(fontSize=14),
#   backgroundColor="black",
#   color="white",
#   footerStyle = list(color="white", fontSize=11),
#   borderColor="black",
#   borderWidth=0.019
# ),
# columns = list(
#   instructor=colDef(show=FALSE),
#   image_path = colDef(name="", width=265),
#   discipline = colDef(name="", maxWidth=130, align="left", footer="Breakout by Type", footerStyle=list(color='black')),
#   rank = colDef(name="", style=list(fontSize=13), maxWidth=50, align="right"),
#   workouts= colDef(name="", minWidth=120),
#   minutes=colDef(name="", minWidth=160,
#                  cell=data_bars(new,
#                                 bar_height=8,
#                                 text_size=11,
#                                 text_color="white",
#                                 text_position = "outside-end",
#                                 background = "transparent",
#                                 round_edges = TRUE,
#                                 fill_color=c("#FFBC51",'#FF3A3A'),
#                                 fill_gradient = TRUE)),
#   difficulty = colDef(name="", align="center", maxWidth=120,
#                       cell=color_tiles(new, bias= 0.4, colors=pal_strive)),
#   workout_data = colDef(name="",  maxWidth=100,
#                         cell=react_sparkline(new, labels=c("first","last"),
#                                              line_color = "white")
#   ))
)
}
)%>%
google_font(font_family="Roboto", font_weight = 300)
saveWidget(table, "05_nested_empty.html", selfcontained = TRUE)
#Create Reactable
table<-reactable(data = teams,
theme = reactableTheme(
style=list(fontFamily="Roboto"),
searchInputStyle = list(background="black"),
pageButtonStyle = list(fontSize=14),
backgroundColor="black",
color="white",
footerStyle = list(color="white", fontSize=11),
borderColor="#3D3D3D",
borderWidth=0.019
),
defaultColDef = colDef(vAlign="center", align="center", headerVAlign="center"),
columns = list(
rank = colDef(name="", style=list(fontSize=13), maxWidth=50, align="right"),
Country = colDef(name="COUNTRY", align="left", vAlign="center", width=220),
Players = colDef(name="# PLAYERS", maxWidth=130, align="left"),
Total_Value = colDef(name="TOTAL VALUE", minWidth=160,
cell=data_bars(data = teams,
bar_height=8,
text_size=11,
text_color="white",
text_position = "outside-end",
background = "transparent",
round_edges = TRUE,
fill_color=c("#FFBC51",'#FF3A3A'),
fill_gradient = TRUE)),
Total_Games = colDef(name="TOTAL GAMES", maxWidth=130, align="right"),
Total_Goals  = colDef(name="TOTAL GOALS", maxWidth=130, align="right"),
Age_average = colDef(name="AVG AGE", align="center", maxWidth=120,
footer="Mean age of players",
cell=color_tiles(data = teams, bias= 0.4, colors=pal_strive))
),
#Sub-Table - nested reactable, when user clicks on instructor, details show aggregates by modal per instructor
details = function(index){
new = players[players$Country == teams$Country[index],]
reactable(data=new,
defaultColDef = colDef(vAlign="center", align="center", headerVAlign="center"),
theme = reactableTheme(
style=list(fontFamily="Roboto"),
searchInputStyle = list(background="black"),
pageButtonStyle = list(fontSize=14),
backgroundColor="black",
color="white",
footerStyle = list(color="white", fontSize=11),
borderColor="black",
borderWidth=0.019
),
# columns = list(
#   instructor=colDef(show=FALSE),
#   image_path = colDef(name="", width=265),
#   discipline = colDef(name="", maxWidth=130, align="left", footer="Breakout by Type", footerStyle=list(color='black')),
#   rank = colDef(name="", style=list(fontSize=13), maxWidth=50, align="right"),
#   workouts= colDef(name="", minWidth=120),
#   minutes=colDef(name="", minWidth=160,
#                  cell=data_bars(new,
#                                 bar_height=8,
#                                 text_size=11,
#                                 text_color="white",
#                                 text_position = "outside-end",
#                                 background = "transparent",
#                                 round_edges = TRUE,
#                                 fill_color=c("#FFBC51",'#FF3A3A'),
#                                 fill_gradient = TRUE)),
#   difficulty = colDef(name="", align="center", maxWidth=120,
#                       cell=color_tiles(new, bias= 0.4, colors=pal_strive)),
#   workout_data = colDef(name="",  maxWidth=100,
#                         cell=react_sparkline(new, labels=c("first","last"),
#                                              line_color = "white")
#   ))
)
}
)%>%
google_font(font_family="Roboto", font_weight = 300)
saveWidget(table, "05_nested_empty.html", selfcontained = TRUE)
data
str(data)
teams
